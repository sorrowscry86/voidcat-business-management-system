version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: voidcat-bms-postgres
    environment:
      POSTGRES_DB: voidcat_bms
      POSTGRES_USER: voidcat_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-voidcat_secure_pass}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/init-scripts:/docker-entrypoint-initdb.d
    networks:
      - voidcat-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U voidcat_user -d voidcat_bms"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: voidcat-bms-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-voidcat_redis_pass}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - voidcat-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: voidcat-bms-backend
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://voidcat_user:${DB_PASSWORD:-voidcat_secure_pass}@postgres:5432/voidcat_bms
      REDIS_URL: redis://:${REDIS_PASSWORD:-voidcat_redis_pass}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      CORS_ORIGIN: ${FRONTEND_URL:-http://localhost:3000}
      
      # AI Agent Configuration
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      
      # Email Configuration
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      
      # File Storage
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION:-us-east-1}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}
      
      # MCP Integration
      MCP_SERVER_ENDPOINT: ${MCP_SERVER_ENDPOINT}
      SUPERMEMORY_API_KEY: ${SUPERMEMORY_API_KEY}
      
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - voidcat-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - ./backend/uploads:/app/uploads

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: voidcat-bms-frontend
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${BACKEND_URL:-http://localhost:3001}
      NEXT_PUBLIC_WS_URL: ${WS_URL:-ws://localhost:3001}
      NEXT_PUBLIC_APP_ENV: ${APP_ENV:-production}
      NEXT_PUBLIC_SENTRY_DSN: ${SENTRY_DSN}
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - voidcat-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  redis_data:

networks:
  voidcat-network:
    driver: bridge